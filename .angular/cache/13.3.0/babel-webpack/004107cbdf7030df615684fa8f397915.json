{"ast":null,"code":"import { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./subject-example/subject-example.component\";\nexport class Lesson5Component {\n  //The above example declares the obs as the observable but does not instantiate it.\n  //To make the observable to emit values, we need to subscribe to it.\n  //We subscribe to the observable, by invoking the subscribe method on it.\n  //We can, optionally, include the three callbacks next(), error() & complete() as shown below\n  //We need to unsubscribe to close the observable when we no longer require it. If not it may lead to memory leak & Performance degradation.\n  //To Unsubscribe from an observable, we need to call the Unsubscribe() method on the subscription.\n\n  /* It will clean up all listeners and free up the memory. It is not necessary for all observables (on this one it is not, as it closes\r\n  the observable after emitting the complete signal)*/\n  constructor() {\n    //he following example creates an observable of a stream of numbers 1, 2, 3, 4, 5\n    //creating observable instance with observable constructor that takes observer as an argument\n    //The variable myObservable is now of the type of observable.\n    this.myObservable = new Observable(observer => {\n      console.log('Observable starts');\n      setTimeout(() => {\n        observer.next('1');\n      }, 1000);\n      setTimeout(() => {\n        observer.next('2');\n      }, 2000);\n      setTimeout(() => {\n        observer.next('3');\n      }, 3000);\n      setTimeout(() => {\n        observer.next('4');\n      }, 4000);\n      setTimeout(() => {\n        observer.next('5');\n      }, 5000);\n      setTimeout(() => {\n        observer.complete();\n      }, 6000); //sending complete event. observable stops here\n\n      setTimeout(() => {\n        observer.next('6');\n      }, 7000); //this code is never called\n    });\n  }\n\n  ngOnInit() {\n    this.mySubscription = this.myObservable.subscribe(val => {\n      console.log(val);\n    }, //next callback\n    error => {\n      console.log('error');\n    }, //error callback\n    () => {\n      console.log('Completed');\n    } //complete callback\n    );\n  }\n\n  ngOnDestroy() {\n    this.mySubscription.unsubscribe();\n  }\n\n}\n\nLesson5Component.ɵfac = function Lesson5Component_Factory(t) {\n  return new (t || Lesson5Component)();\n};\n\nLesson5Component.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: Lesson5Component,\n  selectors: [[\"app-lesson5\"]],\n  decls: 52,\n  vars: 0,\n  template: function Lesson5Component_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Lesson 5: RxJs and Observables\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"p\");\n      i0.ɵɵtext(3, \" The essential concepts in RxJS (Reactive Extensions Library for JavaScript) which solve async event management are:\");\n      i0.ɵɵelement(4, \"br\")(5, \"br\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"h4\");\n      i0.ɵɵtext(7, \"Observables\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"li\");\n      i0.ɵɵtext(9, \" Observables are simply functions that are able to give multiple values over time, either synchronously or asynchronously. They are different from promises because: they are lazy (we have to subscribe to them to get data) while promises execute immediately; observables handle multiple values unlike promises which can only provide a single value; observables are cancelable (you can unsubscribe from them) while promises don't have such a feature and observables provide many useful operators that allow us to transform the way data is handled, transformed or displayed.\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"br\")(11, \"br\");\n      i0.ɵɵelementStart(12, \"h4\");\n      i0.ɵɵtext(13, \"Subject\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"li\");\n      i0.ɵɵtext(15, \" A Subject is a special type of Observable that can act as both observable & an observer. It is equivalent to an EventEmitter, and the only way of multicasting a value or event to multiple Observers. What does that mean? It means that a subject can emit data, on top of having the capability to be subscribed to. Subjects implement both subscribe() method and next(), error() & complete() methods. Subject can be used in a service to fetch some data, and send the result to all components that subscribed to that Subject. Do not expose the Subject object directly to components. Instead, return an Observable version of it which will make the code much safer and prevent poor coding practices.\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"br\")(17, \"br\");\n      i0.ɵɵelementStart(18, \"h4\");\n      i0.ɵɵtext(19, \"Observers\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"li\");\n      i0.ɵɵtext(21, \" The Observable on its own is useless unless someone consumes the value emitted by the observable. We call them observers or subscribers. The observers communicate with the Observable using callbacks. The observer must subscribe with the observable to receive the value from the observable. While subscribing it optionally passes the three callbacks. \");\n      i0.ɵɵelementStart(22, \"b\");\n      i0.ɵɵtext(23, \"next()\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(24, \", \");\n      i0.ɵɵelementStart(25, \"b\");\n      i0.ɵɵtext(26, \"error()\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(27, \" and \");\n      i0.ɵɵelementStart(28, \"b\");\n      i0.ɵɵtext(29, \"complete()\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(30, \". All 3 callbacks are optional! \");\n      i0.ɵɵelement(31, \"br\")(32, \"br\");\n      i0.ɵɵtext(33, \"The observable starts emitting the value as soon as the observer or consumer subscribes to it. The observable invokes the next() callback whenever the value arrives in the stream. It passes the value as the argument to the next callback. If the error occurs, then the error() callback is invoked. It invokes the complete() callback when the stream completes.\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(34, \"br\")(35, \"br\");\n      i0.ɵɵelementStart(36, \"h4\");\n      i0.ɵɵtext(37, \"Subscriptions\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(38, \"li\");\n      i0.ɵɵtext(39, \" Subscriptions are objects that are returned when you subscribe to an Observable. They contain many methods such as the unsubscribe() method that you can call to unsubscribe from receiving published values from the Observable.\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(40, \"br\")(41, \"br\");\n      i0.ɵɵelementStart(42, \"h4\");\n      i0.ɵɵtext(43, \"Operators\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(44, \"li\");\n      i0.ɵɵtext(45, \" Operators allow us to transform the way data is handled, transformed or displayed. Operators are pure functions that enable a functional programming style of dealing with collections with operations like map, filter, concat, reduce, etc.\\n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(46, \"br\")(47, \"br\");\n      i0.ɵɵelementStart(48, \"b\");\n      i0.ɵɵtext(49, \"Check the console to see a custom Observable and a Subject in action!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(50, \"br\")(51, \"app-subject-example\");\n    }\n  },\n  directives: [i1.SubjectExampleComponent],\n  styles: [\"h2[_ngcontent-%COMP%] {\\r\\n  margin-bottom: 2rem;\\r\\n  text-align: center;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxlc3NvbjUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLG1CQUFtQjtFQUNuQixrQkFBa0I7QUFDcEIiLCJmaWxlIjoibGVzc29uNS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaDIge1xyXG4gIG1hcmdpbi1ib3R0b206IDJyZW07XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59Il19 */\"]\n});","map":{"version":3,"sources":["C:/Users/AnjaMustać/Desktop/repo/angular-playground/src/app/components/lessons/lesson5/lesson5.component.ts"],"names":["Observable","i0","i1","Lesson5Component","constructor","myObservable","observer","console","log","setTimeout","next","complete","ngOnInit","mySubscription","subscribe","val","error","ngOnDestroy","unsubscribe","ɵfac","Lesson5Component_Factory","t","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","template","Lesson5Component_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","directives","SubjectExampleComponent","styles"],"mappings":"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","sourcesContent":["import { Observable } from 'rxjs';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"./subject-example/subject-example.component\";\r\nexport class Lesson5Component {\r\n    //The above example declares the obs as the observable but does not instantiate it.\r\n    //To make the observable to emit values, we need to subscribe to it.\r\n    //We subscribe to the observable, by invoking the subscribe method on it.\r\n    //We can, optionally, include the three callbacks next(), error() & complete() as shown below\r\n    //We need to unsubscribe to close the observable when we no longer require it. If not it may lead to memory leak & Performance degradation.\r\n    //To Unsubscribe from an observable, we need to call the Unsubscribe() method on the subscription.\r\n    /* It will clean up all listeners and free up the memory. It is not necessary for all observables (on this one it is not, as it closes\r\n    the observable after emitting the complete signal)*/\r\n    constructor() {\r\n        //he following example creates an observable of a stream of numbers 1, 2, 3, 4, 5\r\n        //creating observable instance with observable constructor that takes observer as an argument\r\n        //The variable myObservable is now of the type of observable.\r\n        this.myObservable = new Observable((observer) => {\r\n            console.log('Observable starts');\r\n            setTimeout(() => {\r\n                observer.next('1');\r\n            }, 1000);\r\n            setTimeout(() => {\r\n                observer.next('2');\r\n            }, 2000);\r\n            setTimeout(() => {\r\n                observer.next('3');\r\n            }, 3000);\r\n            setTimeout(() => {\r\n                observer.next('4');\r\n            }, 4000);\r\n            setTimeout(() => {\r\n                observer.next('5');\r\n            }, 5000);\r\n            setTimeout(() => {\r\n                observer.complete();\r\n            }, 6000); //sending complete event. observable stops here\r\n            setTimeout(() => {\r\n                observer.next('6');\r\n            }, 7000); //this code is never called\r\n        });\r\n    }\r\n    ngOnInit() {\r\n        this.mySubscription = this.myObservable.subscribe((val) => {\r\n            console.log(val);\r\n        }, //next callback\r\n        (error) => {\r\n            console.log('error');\r\n        }, //error callback\r\n        () => {\r\n            console.log('Completed');\r\n        } //complete callback\r\n        );\r\n    }\r\n    ngOnDestroy() {\r\n        this.mySubscription.unsubscribe();\r\n    }\r\n}\r\nLesson5Component.ɵfac = function Lesson5Component_Factory(t) { return new (t || Lesson5Component)(); };\r\nLesson5Component.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: Lesson5Component, selectors: [[\"app-lesson5\"]], decls: 52, vars: 0, template: function Lesson5Component_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"h2\");\r\n        i0.ɵɵtext(1, \"Lesson 5: RxJs and Observables\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(2, \"p\");\r\n        i0.ɵɵtext(3, \" The essential concepts in RxJS (Reactive Extensions Library for JavaScript) which solve async event management are:\");\r\n        i0.ɵɵelement(4, \"br\")(5, \"br\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(6, \"h4\");\r\n        i0.ɵɵtext(7, \"Observables\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(8, \"li\");\r\n        i0.ɵɵtext(9, \" Observables are simply functions that are able to give multiple values over time, either synchronously or asynchronously. They are different from promises because: they are lazy (we have to subscribe to them to get data) while promises execute immediately; observables handle multiple values unlike promises which can only provide a single value; observables are cancelable (you can unsubscribe from them) while promises don't have such a feature and observables provide many useful operators that allow us to transform the way data is handled, transformed or displayed.\\n\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelement(10, \"br\")(11, \"br\");\r\n        i0.ɵɵelementStart(12, \"h4\");\r\n        i0.ɵɵtext(13, \"Subject\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(14, \"li\");\r\n        i0.ɵɵtext(15, \" A Subject is a special type of Observable that can act as both observable & an observer. It is equivalent to an EventEmitter, and the only way of multicasting a value or event to multiple Observers. What does that mean? It means that a subject can emit data, on top of having the capability to be subscribed to. Subjects implement both subscribe() method and next(), error() & complete() methods. Subject can be used in a service to fetch some data, and send the result to all components that subscribed to that Subject. Do not expose the Subject object directly to components. Instead, return an Observable version of it which will make the code much safer and prevent poor coding practices.\\n\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelement(16, \"br\")(17, \"br\");\r\n        i0.ɵɵelementStart(18, \"h4\");\r\n        i0.ɵɵtext(19, \"Observers\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(20, \"li\");\r\n        i0.ɵɵtext(21, \" The Observable on its own is useless unless someone consumes the value emitted by the observable. We call them observers or subscribers. The observers communicate with the Observable using callbacks. The observer must subscribe with the observable to receive the value from the observable. While subscribing it optionally passes the three callbacks. \");\r\n        i0.ɵɵelementStart(22, \"b\");\r\n        i0.ɵɵtext(23, \"next()\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵtext(24, \", \");\r\n        i0.ɵɵelementStart(25, \"b\");\r\n        i0.ɵɵtext(26, \"error()\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵtext(27, \" and \");\r\n        i0.ɵɵelementStart(28, \"b\");\r\n        i0.ɵɵtext(29, \"complete()\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵtext(30, \". All 3 callbacks are optional! \");\r\n        i0.ɵɵelement(31, \"br\")(32, \"br\");\r\n        i0.ɵɵtext(33, \"The observable starts emitting the value as soon as the observer or consumer subscribes to it. The observable invokes the next() callback whenever the value arrives in the stream. It passes the value as the argument to the next callback. If the error occurs, then the error() callback is invoked. It invokes the complete() callback when the stream completes.\\n\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelement(34, \"br\")(35, \"br\");\r\n        i0.ɵɵelementStart(36, \"h4\");\r\n        i0.ɵɵtext(37, \"Subscriptions\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(38, \"li\");\r\n        i0.ɵɵtext(39, \" Subscriptions are objects that are returned when you subscribe to an Observable. They contain many methods such as the unsubscribe() method that you can call to unsubscribe from receiving published values from the Observable.\\n\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelement(40, \"br\")(41, \"br\");\r\n        i0.ɵɵelementStart(42, \"h4\");\r\n        i0.ɵɵtext(43, \"Operators\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementStart(44, \"li\");\r\n        i0.ɵɵtext(45, \" Operators allow us to transform the way data is handled, transformed or displayed. Operators are pure functions that enable a functional programming style of dealing with collections with operations like map, filter, concat, reduce, etc.\\n\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelement(46, \"br\")(47, \"br\");\r\n        i0.ɵɵelementStart(48, \"b\");\r\n        i0.ɵɵtext(49, \"Check the console to see a custom Observable and a Subject in action!\");\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelement(50, \"br\")(51, \"app-subject-example\");\r\n    } }, directives: [i1.SubjectExampleComponent], styles: [\"h2[_ngcontent-%COMP%] {\\r\\n  margin-bottom: 2rem;\\r\\n  text-align: center;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxlc3NvbjUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLG1CQUFtQjtFQUNuQixrQkFBa0I7QUFDcEIiLCJmaWxlIjoibGVzc29uNS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiaDIge1xyXG4gIG1hcmdpbi1ib3R0b206IDJyZW07XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59Il19 */\"] });\r\n"]},"metadata":{},"sourceType":"module"}